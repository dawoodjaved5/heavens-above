{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Heavens Above \u2013 Documentation","text":"<p>This documentation site is built with MkDocs and deployed via GitHub Actions.</p>"},{"location":"#overview","title":"Overview","text":"<ul> <li>Site located under <code>heavens-above/public</code></li> <li>CI and code review run linters and security analysis on pushes and PRs</li> <li>Scheduled job creates a simple backup log artifact nightly</li> <li>Dependabot monitors npm dependencies</li> </ul>"},{"location":"#deployment","title":"Deployment","text":"<p>The main site is deployed on Vercel.</p>"},{"location":"#workflow-documentation","title":"Workflow Documentation","text":"<p>This document provides a detailed explanation for the 7 GitHub Actions workflows set up for this assignment.</p>"},{"location":"#1-continuous-integration-setup","title":"1. Continuous Integration Setup","text":"<p>Workflow Name: Continuous Integration File Path: <code>.github/workflows/ci.yml</code></p>"},{"location":"#purpose","title":"Purpose","text":"<p>This workflow performs continuous integration (CI) checks on every push and pull request to the main branch. Its goal is to ensure that all new code is high-quality, passes all tests, and does not introduce security vulnerabilities before being merged.</p>"},{"location":"#triggers","title":"Triggers","text":"<p>This workflow is triggered by: - Push to the main branch - Pull request to the main branch</p>"},{"location":"#configuration-key-steps","title":"Configuration &amp; Key Steps","text":"<p>The workflow runs a single job called <code>build-and-lint</code> on an <code>ubuntu-latest</code> runner.</p> <ol> <li>Checkout Repository: It first checks out the repository's code</li> <li>Set up Node.js: It installs Node.js version 20</li> <li>Install Dependencies: It securely installs project dependencies using <code>npm ci</code> (if <code>package-lock.json</code> exists) or <code>npm install</code></li> <li>Run Lint: It checks if a lint script exists in <code>package.json</code>. If it does, it runs <code>npm run lint</code> to enforce code style</li> <li>Run Tests: It checks if a test script exists. If it does, it runs <code>npm test</code> to execute the project's test suite</li> <li>Run Security Audit: It runs <code>npm audit --audit-level=moderate</code> to scan for dependencies with moderate or higher security vulnerabilities</li> <li>Code Quality Check: It performs a basic syntax check on all <code>.js</code> files (outside of <code>node_modules</code>) and verifies that HTML/CSS files exist in the <code>public/</code> directory</li> </ol>"},{"location":"#how-to-interpret-results","title":"How to Interpret Results","text":"<ul> <li>Green Checkmark: All steps (install, lint, test, audit, and quality check) completed successfully. The code is safe to merge</li> <li>Red 'X': One of the steps failed. You can click on the workflow run's \"Details\" to see exactly which step (e.g., \"Run lint\" or \"Run tests\") failed and read the error log</li> </ul>"},{"location":"#2-deployment-pipeline","title":"2. Deployment Pipeline","text":"<p>Workflow Name: Deploy Site to Vercel File Path: <code>.github/workflows/deploy-vercel.yml</code></p>"},{"location":"#purpose_1","title":"Purpose","text":"<p>This workflow implements a full deployment pipeline. It automates the process of building, testing, and deploying the web application to the Vercel hosting platform. It distinguishes between production and preview environments.</p>"},{"location":"#triggers_1","title":"Triggers","text":"<ul> <li>Push to the main branch (for production deployments)</li> <li>Pull request to the main branch (for preview deployments)</li> <li><code>workflow_dispatch</code> (for manual runs)</li> </ul>"},{"location":"#configuration-key-steps_1","title":"Configuration &amp; Key Steps","text":"<p>This workflow runs checks and then builds/deploys the application.</p> <ol> <li>CI Checks: It first runs all the same checks as the CI workflow (install dependencies, lint, test) to ensure the code is valid before deploying</li> <li>Build Data: It runs <code>npm run build</code> to execute the project's build script (which scrapes satellite data)</li> <li>Install Vercel CLI: It installs the Vercel command-line tool</li> <li>Pull Vercel Environment: It securely pulls the correct Vercel project information using a <code>VERCEL_TOKEN</code> secret</li> <li>Build Project (Production/Preview):</li> <li>If triggered by a push to main, it runs <code>vercel build --prod</code></li> <li>If triggered by a pull request, it runs <code>vercel build</code></li> <li>Deploy Project (Production/Preview):</li> <li>If push to main, it deploys the prebuilt project to production (<code>vercel deploy --prebuilt --prod</code>)</li> <li>If pull request, it deploys the prebuilt project to a preview environment (<code>vercel deploy --prebuilt</code>)</li> </ol>"},{"location":"#how-to-interpret-results_1","title":"How to Interpret Results","text":"<ul> <li>Green Checkmark: The application was successfully built and deployed</li> <li>On a Pull Request: The Vercel bot will add a comment to the PR with a unique URL to view the \"preview\" deployment</li> <li>On a main Push: The production website will be updated with the new version</li> </ul>"},{"location":"#3-scheduled-tasks","title":"3. Scheduled Tasks","text":"<p>Workflow Name: Scheduled Data Updates File Path: <code>.github/workflows/scheduled-tasks.yml</code></p>"},{"location":"#purpose_2","title":"Purpose","text":"<p>This workflow runs on an automated schedule to perform a maintenance task. It automatically runs the data scraping script to fetch the latest satellite data and commits the new data back to the repository.</p>"},{"location":"#triggers_2","title":"Triggers","text":"<ul> <li>Schedule: <code>cron: '0 19 * * *'</code> (runs automatically daily at 12am PKT)</li> <li>Push to the main branch</li> <li><code>workflow_dispatch</code> (for manual runs)</li> </ul>"},{"location":"#configuration-key-steps_2","title":"Configuration &amp; Key Steps","text":"<ol> <li>Checkout &amp; Setup: Checks out the code and sets up Node.js 20</li> <li>Install &amp; Run: Installs dependencies and runs the data scraping script (<code>node run.js</code>)</li> <li>Commit and Push:</li> <li>It configures Git with a \"GitHub Action\" user</li> <li>It checks if the <code>public/data/</code> directory has any changes</li> <li>If changes are found, it commits them with the message \"Update satellite data - [date]\" and pushes the commit directly to the main branch</li> <li>Trigger Vercel (Optional): If a <code>VERCEL_DEPLOY_HOOK_URL</code> secret is set, it sends a request to that URL to trigger a new Vercel deployment with the new data</li> <li>Log &amp; Artifacts: It writes a summary to the GitHub step summary and uploads a backup artifact named <code>data-update-[date]</code></li> </ol>"},{"location":"#how-to-interpret-results_2","title":"How to Interpret Results","text":"<ul> <li>You can see this workflow run automatically in the \"Actions\" tab daily</li> <li>A successful run will be indicated by a new commit appearing in the repository's history, authored by \"GitHub Action\"</li> <li>You can also download the <code>data-update</code> artifact from the workflow summary page to see a log</li> </ul>"},{"location":"#4-dependency-updates","title":"4. Dependency Updates","text":"<p>System Files: - Configuration: <code>.github/dependabot.yml</code> - Workflow: <code>.github/workflows/dependency-updates.yml</code></p>"},{"location":"#purpose_3","title":"Purpose","text":"<p>This system automates the process of keeping project dependencies (from <code>package.json</code>) up-to-date. It uses two files: <code>dependabot.yml</code> to find updates and create pull requests, and the workflow to test and auto-merge those PRs.</p>"},{"location":"#triggers_3","title":"Triggers","text":"<ul> <li>Dependabot Config: The <code>dependabot.yml</code> file configures Dependabot to scan for npm updates weekly</li> <li>Workflow: The <code>dependency-updates.yml</code> workflow is triggered on <code>pull_request</code> (to test Dependabot's PRs) and <code>schedule</code>/<code>workflow_dispatch</code></li> </ul>"},{"location":"#configuration-key-steps_3","title":"Configuration &amp; Key Steps","text":"<ol> <li>Dependabot Scan (Weekly): As configured in <code>dependabot.yml</code>, Dependabot scans the npm ecosystem for updates. If it finds any, it creates a new pull request with the change</li> <li>Workflow Run (On PR): When Dependabot opens a pull request, this workflow triggers</li> <li>Run Tests: The workflow installs the new dependencies (<code>npm ci</code>) and runs the test suite (<code>npm test</code>)</li> <li>Auto-Merge (If Safe):</li> <li>The workflow checks if the PR author is <code>dependabot[bot]</code></li> <li>It fetches metadata to see if the update is a minor or patch change</li> <li>If the tests pass and the update is safe (minor/patch), the workflow automatically approves the PR and merges it using the \"squash and merge\" strategy</li> </ol>"},{"location":"#how-to-interpret-results_3","title":"How to Interpret Results","text":"<ul> <li>Success: You will see pull requests from <code>dependabot[bot]</code> get a green checkmark from this workflow and then be merged automatically</li> <li>Failure: If a dependency update causes the <code>npm test</code> step to fail, the workflow will show a red 'X'. The pull request will not be merged, indicating that a developer must review it manually</li> </ul>"},{"location":"#5-code-review-workflow","title":"5. Code Review Workflow","text":"<p>Workflow Name: Code Review File Path: <code>.github/workflows/code-review.yml</code></p>"},{"location":"#purpose_4","title":"Purpose","text":"<p>This workflow enhances the code review process by automatically scanning all pull requests for code quality, dependency vulnerabilities, and deeper security issues using static analysis.</p>"},{"location":"#triggers_4","title":"Triggers","text":"<ul> <li>Push to the main branch</li> <li>Pull request to the main branch</li> <li><code>workflow_dispatch</code> (for manual runs)</li> </ul>"},{"location":"#configuration-key-steps_4","title":"Configuration &amp; Key Steps","text":"<p>This workflow runs two separate jobs in parallel: <code>lint</code> and <code>codeql</code>.</p>"},{"location":"#job-lint","title":"Job: lint","text":"<ol> <li>Installs Node.js 20 and dependencies</li> <li>Runs <code>npm run lint</code> (if it exists) to check code style</li> <li>Runs <code>npm audit --audit-level=moderate</code> to check for dependency vulnerabilities</li> <li>Performs the basic syntax and file-finding checks</li> </ol>"},{"location":"#job-codeql","title":"Job: codeql","text":"<ol> <li>This job uses the official <code>github/codeql-action</code> to perform advanced security analysis</li> <li>It initializes CodeQL for the <code>javascript</code> language</li> <li>It performs a deep analysis of the code to find potential security vulnerabilities (like injection risks, improper sanitization, etc.)</li> </ol>"},{"location":"#how-to-interpret-results_4","title":"How to Interpret Results","text":"<ul> <li>This workflow's status will appear in the \"Checks\" section of a pull request</li> <li>Green Checkmark: All checks (lint, audit, CodeQL) passed</li> <li>Red 'X': A failure in lint or audit will be reported in the job's log</li> <li>CodeQL Findings: If the codeql job finds any security issues, it will report them in the \"Security\" &gt; \"Code scanning\" tab of the repository, allowing for detailed review of the vulnerability</li> </ul>"},{"location":"#6-documentation-deployment","title":"6. Documentation Deployment","text":"<p>Workflow Name: Documentation Deployment File Path: <code>.github/workflows/documentation.yml</code></p>"},{"location":"#purpose_5","title":"Purpose","text":"<p>This workflow automates the building and deployment of the project's technical documentation to GitHub Pages, making it publicly accessible.</p>"},{"location":"#triggers_5","title":"Triggers","text":"<ul> <li>Push to the main branch</li> </ul>"},{"location":"#configuration-key-steps_5","title":"Configuration &amp; Key Steps","text":"<ol> <li>Checkout Code: Checks out the repository's code</li> <li>Setup Python: Installs Python 3.11, which is required by MkDocs</li> <li>Install MkDocs: Installs the <code>mkdocs</code> and <code>mkdocs-material</code> packages using pip</li> <li>Build Documentation: Runs the <code>mkdocs build</code> command. This converts the Markdown files (e.g., in a <code>docs/</code> folder) into a static HTML website in a new <code>site/</code> directory</li> <li>Deploy to GitHub Pages:</li> <li>It uses the <code>peaceiris/actions-gh-pages</code> action</li> <li>This action takes the contents of the <code>site/</code> directory and automatically pushes them to a special branch named <code>gh-pages</code></li> </ol>"},{"location":"#how-to-interpret-results_5","title":"How to Interpret Results","text":"<ul> <li>Green Checkmark: The documentation was successfully built and deployed</li> <li>You can go to the repository's \"Settings\" &gt; \"Pages\" tab to find the public URL for the deployed GitHub Pages site</li> <li>You can also check the <code>gh-pages</code> branch in the repository to see the committed HTML files</li> </ul>"},{"location":"#7-custom-workflow-integration","title":"7. Custom Workflow Integration","text":"<p>Workflow Name: Release Notes Generator File Path: <code>.github/workflows/release-notes.yml</code></p>"},{"location":"#purpose_6","title":"Purpose","text":"<p>This is a custom workflow designed to automate a specific project task: generating a simple release notes file.</p>"},{"location":"#triggers_6","title":"Triggers","text":"<p>This workflow is triggered by a wide variety of events: - Push to any tag matching the pattern <code>v*.*.*</code> (e.g., <code>v1.0.0</code>) - <code>release: types: [created]</code> (when a new GitHub Release is created) - <code>workflow_dispatch</code> (for manual runs) - Schedule: <code>cron: '0 19 * * *'</code> (runs automatically daily at 12am PKT)</p>"},{"location":"#configuration-key-steps_6","title":"Configuration &amp; Key Steps","text":"<ol> <li>Checkout Code: Checks out the repository's code</li> <li>Generate Release Notes: This step runs a simple shell command to create a file named <code>release-notes.txt</code> and populates it with the text \"Release generated at [current date]\"</li> <li>Upload Notes: The workflow then uses the <code>actions/upload-artifact</code> action to upload the newly created <code>release-notes.txt</code> as a workflow artifact named <code>release-notes</code></li> </ol>"},{"location":"#how-to-interpret-results_6","title":"How to Interpret Results","text":"<ul> <li>A successful (green) run of this workflow will have an \"artifact\" associated with it</li> <li>To find the notes, click on the completed workflow run in the \"Actions\" tab. On the summary page, you will see an artifact named \"release-notes\" that you can download</li> </ul>"}]}